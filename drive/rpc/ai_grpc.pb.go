// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: drive/rpc/ai.proto

package drive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AiProto_SendModelGenerate_FullMethodName = "/drive.AiProto/SendModelGenerate"
	AiProto_SendModelChat_FullMethodName     = "/drive.AiProto/SendModelChat"
)

// AiProtoClient is the client API for AiProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AiProtoClient interface {
	SendModelGenerate(ctx context.Context, opts ...grpc.CallOption) (AiProto_SendModelGenerateClient, error)
	SendModelChat(ctx context.Context, opts ...grpc.CallOption) (AiProto_SendModelChatClient, error)
}

type aiProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewAiProtoClient(cc grpc.ClientConnInterface) AiProtoClient {
	return &aiProtoClient{cc}
}

func (c *aiProtoClient) SendModelGenerate(ctx context.Context, opts ...grpc.CallOption) (AiProto_SendModelGenerateClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AiProto_ServiceDesc.Streams[0], AiProto_SendModelGenerate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &aiProtoSendModelGenerateClient{ClientStream: stream}
	return x, nil
}

type AiProto_SendModelGenerateClient interface {
	Send(*ModelGenerateRequest) error
	Recv() (*ModelGenerateReply, error)
	grpc.ClientStream
}

type aiProtoSendModelGenerateClient struct {
	grpc.ClientStream
}

func (x *aiProtoSendModelGenerateClient) Send(m *ModelGenerateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aiProtoSendModelGenerateClient) Recv() (*ModelGenerateReply, error) {
	m := new(ModelGenerateReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aiProtoClient) SendModelChat(ctx context.Context, opts ...grpc.CallOption) (AiProto_SendModelChatClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AiProto_ServiceDesc.Streams[1], AiProto_SendModelChat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &aiProtoSendModelChatClient{ClientStream: stream}
	return x, nil
}

type AiProto_SendModelChatClient interface {
	Send(*ModelChatRequest) error
	Recv() (*ModelChatReply, error)
	grpc.ClientStream
}

type aiProtoSendModelChatClient struct {
	grpc.ClientStream
}

func (x *aiProtoSendModelChatClient) Send(m *ModelChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aiProtoSendModelChatClient) Recv() (*ModelChatReply, error) {
	m := new(ModelChatReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AiProtoServer is the server API for AiProto service.
// All implementations must embed UnimplementedAiProtoServer
// for forward compatibility
type AiProtoServer interface {
	SendModelGenerate(AiProto_SendModelGenerateServer) error
	SendModelChat(AiProto_SendModelChatServer) error
	mustEmbedUnimplementedAiProtoServer()
}

// UnimplementedAiProtoServer must be embedded to have forward compatible implementations.
type UnimplementedAiProtoServer struct {
}

func (UnimplementedAiProtoServer) SendModelGenerate(AiProto_SendModelGenerateServer) error {
	return status.Errorf(codes.Unimplemented, "method SendModelGenerate not implemented")
}
func (UnimplementedAiProtoServer) SendModelChat(AiProto_SendModelChatServer) error {
	return status.Errorf(codes.Unimplemented, "method SendModelChat not implemented")
}
func (UnimplementedAiProtoServer) mustEmbedUnimplementedAiProtoServer() {}

// UnsafeAiProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiProtoServer will
// result in compilation errors.
type UnsafeAiProtoServer interface {
	mustEmbedUnimplementedAiProtoServer()
}

func RegisterAiProtoServer(s grpc.ServiceRegistrar, srv AiProtoServer) {
	s.RegisterService(&AiProto_ServiceDesc, srv)
}

func _AiProto_SendModelGenerate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AiProtoServer).SendModelGenerate(&aiProtoSendModelGenerateServer{ServerStream: stream})
}

type AiProto_SendModelGenerateServer interface {
	Send(*ModelGenerateReply) error
	Recv() (*ModelGenerateRequest, error)
	grpc.ServerStream
}

type aiProtoSendModelGenerateServer struct {
	grpc.ServerStream
}

func (x *aiProtoSendModelGenerateServer) Send(m *ModelGenerateReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aiProtoSendModelGenerateServer) Recv() (*ModelGenerateRequest, error) {
	m := new(ModelGenerateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AiProto_SendModelChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AiProtoServer).SendModelChat(&aiProtoSendModelChatServer{ServerStream: stream})
}

type AiProto_SendModelChatServer interface {
	Send(*ModelChatReply) error
	Recv() (*ModelChatRequest, error)
	grpc.ServerStream
}

type aiProtoSendModelChatServer struct {
	grpc.ServerStream
}

func (x *aiProtoSendModelChatServer) Send(m *ModelChatReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aiProtoSendModelChatServer) Recv() (*ModelChatRequest, error) {
	m := new(ModelChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AiProto_ServiceDesc is the grpc.ServiceDesc for AiProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AiProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drive.AiProto",
	HandlerType: (*AiProtoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendModelGenerate",
			Handler:       _AiProto_SendModelGenerate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendModelChat",
			Handler:       _AiProto_SendModelChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "drive/rpc/ai.proto",
}
