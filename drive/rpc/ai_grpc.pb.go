// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: drive/rpc/ai.proto

package drive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AiProto_SendChat_FullMethodName = "/drive.AiProto/SendChat"
)

// AiProtoClient is the client API for AiProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AiProtoClient interface {
	SendChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatReply, error)
}

type aiProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewAiProtoClient(cc grpc.ClientConnInterface) AiProtoClient {
	return &aiProtoClient{cc}
}

func (c *aiProtoClient) SendChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatReply)
	err := c.cc.Invoke(ctx, AiProto_SendChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiProtoServer is the server API for AiProto service.
// All implementations must embed UnimplementedAiProtoServer
// for forward compatibility
type AiProtoServer interface {
	SendChat(context.Context, *ChatRequest) (*ChatReply, error)
	mustEmbedUnimplementedAiProtoServer()
}

// UnimplementedAiProtoServer must be embedded to have forward compatible implementations.
type UnimplementedAiProtoServer struct {
}

func (UnimplementedAiProtoServer) SendChat(context.Context, *ChatRequest) (*ChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChat not implemented")
}
func (UnimplementedAiProtoServer) mustEmbedUnimplementedAiProtoServer() {}

// UnsafeAiProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiProtoServer will
// result in compilation errors.
type UnsafeAiProtoServer interface {
	mustEmbedUnimplementedAiProtoServer()
}

func RegisterAiProtoServer(s grpc.ServiceRegistrar, srv AiProtoServer) {
	s.RegisterService(&AiProto_ServiceDesc, srv)
}

func _AiProto_SendChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiProtoServer).SendChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AiProto_SendChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiProtoServer).SendChat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AiProto_ServiceDesc is the grpc.ServiceDesc for AiProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AiProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drive.AiProto",
	HandlerType: (*AiProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendChat",
			Handler:    _AiProto_SendChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drive/rpc/ai.proto",
}
