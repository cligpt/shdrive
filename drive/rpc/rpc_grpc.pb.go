// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: drive/rpc/rpc.proto

package drive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RpcProto_SendChat_FullMethodName  = "/drive.RpcProto/SendChat"
	RpcProto_SendQuery_FullMethodName = "/drive.RpcProto/SendQuery"
)

// RpcProtoClient is the client API for RpcProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcProtoClient interface {
	SendChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatReply, error)
	SendQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
}

type rpcProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcProtoClient(cc grpc.ClientConnInterface) RpcProtoClient {
	return &rpcProtoClient{cc}
}

func (c *rpcProtoClient) SendChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatReply)
	err := c.cc.Invoke(ctx, RpcProto_SendChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcProtoClient) SendQuery(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, RpcProto_SendQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcProtoServer is the server API for RpcProto service.
// All implementations must embed UnimplementedRpcProtoServer
// for forward compatibility
type RpcProtoServer interface {
	SendChat(context.Context, *ChatRequest) (*ChatReply, error)
	SendQuery(context.Context, *QueryRequest) (*QueryReply, error)
	mustEmbedUnimplementedRpcProtoServer()
}

// UnimplementedRpcProtoServer must be embedded to have forward compatible implementations.
type UnimplementedRpcProtoServer struct {
}

func (UnimplementedRpcProtoServer) SendChat(context.Context, *ChatRequest) (*ChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChat not implemented")
}
func (UnimplementedRpcProtoServer) SendQuery(context.Context, *QueryRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendQuery not implemented")
}
func (UnimplementedRpcProtoServer) mustEmbedUnimplementedRpcProtoServer() {}

// UnsafeRpcProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcProtoServer will
// result in compilation errors.
type UnsafeRpcProtoServer interface {
	mustEmbedUnimplementedRpcProtoServer()
}

func RegisterRpcProtoServer(s grpc.ServiceRegistrar, srv RpcProtoServer) {
	s.RegisterService(&RpcProto_ServiceDesc, srv)
}

func _RpcProto_SendChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcProtoServer).SendChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpcProto_SendChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcProtoServer).SendChat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcProto_SendQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcProtoServer).SendQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpcProto_SendQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcProtoServer).SendQuery(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcProto_ServiceDesc is the grpc.ServiceDesc for RpcProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drive.RpcProto",
	HandlerType: (*RpcProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendChat",
			Handler:    _RpcProto_SendChat_Handler,
		},
		{
			MethodName: "SendQuery",
			Handler:    _RpcProto_SendQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drive/rpc/rpc.proto",
}
