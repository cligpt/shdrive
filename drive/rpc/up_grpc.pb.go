// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: drive/rpc/up.proto

package drive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UpProto_SendCheckVersion_FullMethodName   = "/drive.UpProto/SendCheckVersion"
	UpProto_SendUpgradeVersion_FullMethodName = "/drive.UpProto/SendUpgradeVersion"
)

// UpProtoClient is the client API for UpProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpProtoClient interface {
	SendCheckVersion(ctx context.Context, opts ...grpc.CallOption) (UpProto_SendCheckVersionClient, error)
	SendUpgradeVersion(ctx context.Context, opts ...grpc.CallOption) (UpProto_SendUpgradeVersionClient, error)
}

type upProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewUpProtoClient(cc grpc.ClientConnInterface) UpProtoClient {
	return &upProtoClient{cc}
}

func (c *upProtoClient) SendCheckVersion(ctx context.Context, opts ...grpc.CallOption) (UpProto_SendCheckVersionClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UpProto_ServiceDesc.Streams[0], UpProto_SendCheckVersion_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &upProtoSendCheckVersionClient{ClientStream: stream}
	return x, nil
}

type UpProto_SendCheckVersionClient interface {
	Send(*CheckVersionRequest) error
	Recv() (*CheckVersionReply, error)
	grpc.ClientStream
}

type upProtoSendCheckVersionClient struct {
	grpc.ClientStream
}

func (x *upProtoSendCheckVersionClient) Send(m *CheckVersionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upProtoSendCheckVersionClient) Recv() (*CheckVersionReply, error) {
	m := new(CheckVersionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upProtoClient) SendUpgradeVersion(ctx context.Context, opts ...grpc.CallOption) (UpProto_SendUpgradeVersionClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UpProto_ServiceDesc.Streams[1], UpProto_SendUpgradeVersion_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &upProtoSendUpgradeVersionClient{ClientStream: stream}
	return x, nil
}

type UpProto_SendUpgradeVersionClient interface {
	Send(*UpgradeVersionRequest) error
	Recv() (*UpgradeVersionReply, error)
	grpc.ClientStream
}

type upProtoSendUpgradeVersionClient struct {
	grpc.ClientStream
}

func (x *upProtoSendUpgradeVersionClient) Send(m *UpgradeVersionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upProtoSendUpgradeVersionClient) Recv() (*UpgradeVersionReply, error) {
	m := new(UpgradeVersionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpProtoServer is the server API for UpProto service.
// All implementations must embed UnimplementedUpProtoServer
// for forward compatibility
type UpProtoServer interface {
	SendCheckVersion(UpProto_SendCheckVersionServer) error
	SendUpgradeVersion(UpProto_SendUpgradeVersionServer) error
	mustEmbedUnimplementedUpProtoServer()
}

// UnimplementedUpProtoServer must be embedded to have forward compatible implementations.
type UnimplementedUpProtoServer struct {
}

func (UnimplementedUpProtoServer) SendCheckVersion(UpProto_SendCheckVersionServer) error {
	return status.Errorf(codes.Unimplemented, "method SendCheckVersion not implemented")
}
func (UnimplementedUpProtoServer) SendUpgradeVersion(UpProto_SendUpgradeVersionServer) error {
	return status.Errorf(codes.Unimplemented, "method SendUpgradeVersion not implemented")
}
func (UnimplementedUpProtoServer) mustEmbedUnimplementedUpProtoServer() {}

// UnsafeUpProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpProtoServer will
// result in compilation errors.
type UnsafeUpProtoServer interface {
	mustEmbedUnimplementedUpProtoServer()
}

func RegisterUpProtoServer(s grpc.ServiceRegistrar, srv UpProtoServer) {
	s.RegisterService(&UpProto_ServiceDesc, srv)
}

func _UpProto_SendCheckVersion_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpProtoServer).SendCheckVersion(&upProtoSendCheckVersionServer{ServerStream: stream})
}

type UpProto_SendCheckVersionServer interface {
	Send(*CheckVersionReply) error
	Recv() (*CheckVersionRequest, error)
	grpc.ServerStream
}

type upProtoSendCheckVersionServer struct {
	grpc.ServerStream
}

func (x *upProtoSendCheckVersionServer) Send(m *CheckVersionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upProtoSendCheckVersionServer) Recv() (*CheckVersionRequest, error) {
	m := new(CheckVersionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UpProto_SendUpgradeVersion_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpProtoServer).SendUpgradeVersion(&upProtoSendUpgradeVersionServer{ServerStream: stream})
}

type UpProto_SendUpgradeVersionServer interface {
	Send(*UpgradeVersionReply) error
	Recv() (*UpgradeVersionRequest, error)
	grpc.ServerStream
}

type upProtoSendUpgradeVersionServer struct {
	grpc.ServerStream
}

func (x *upProtoSendUpgradeVersionServer) Send(m *UpgradeVersionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upProtoSendUpgradeVersionServer) Recv() (*UpgradeVersionRequest, error) {
	m := new(UpgradeVersionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpProto_ServiceDesc is the grpc.ServiceDesc for UpProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drive.UpProto",
	HandlerType: (*UpProtoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendCheckVersion",
			Handler:       _UpProto_SendCheckVersion_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendUpgradeVersion",
			Handler:       _UpProto_SendUpgradeVersion_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "drive/rpc/up.proto",
}
